truffle(develop)> test tests/test.js > test.out
Using network 'develop'.


Compiling your contracts...
===========================
> Everything is up to date, there is nothing to compile.



  Contract: MUBCToken: Core Functionality
    Deployer/ cron external permissions ("onlyCron()"):
      ✓ Cron address is publically accessable
      ✓ Deploying address (cron) can access methods modified by "onlyCron()" (57ms)
      ✓ Arbitrary addresses (not cron) revert from "onlyCron()" (45ms)
    User registration:
      ✓ New users can be enrolled as a member (106ms)
      ✓ New users can be enrolled as an executive (89ms)
      ✓ Existing users cannot be enrolled (88ms)
      ✓ Registration returns uuid and emits "userRegistered()" event (61ms)
    Token minting and balances:
      ✓ New MUBC Token can be minted to existing users (152ms)
      ✓ New MUBC Token cannot be minted to non-existent users (45ms)
      ✓ Minting emits "IncentiveMinted()
    Circuit breaker
      ✓ The circuit breaker state can be toggled on and off (61ms)
      ✓ The contract is non-functional while the circuit is broken (88ms)
      ✓ Breaker flip returns state and emits "BreakerFlipped()" (42ms)
    User profiles
      ✓ Non-existent profile queries revert
      ✓ uniqueIDs can look up uuids
      ✓ Profile returns uniqueID, name, balance (61ms)
      ✓ @TODO: Profile returns all completed bounties
      ✓ Profile returns all purchased items (350ms)
    uniqueID internal permissions ("onlyExecutive()"):
      Token minting permissions:
        ✓ Executive accounts can mint MUBC Token (48ms)
        ✓ Member accounts cannot mint MUBC Token
      Circuit breaker permissions:
        ✓ Executive accounts can flip the circuit breaker
        ✓ Member accounts cannot flip the circuit breaker

  Contract: MUBCToken: Item Shop Functionality
    Item listing:
      ✓ Items with infinite purchasability can be created (183ms)
      ✓ Items with finite purchasability can be created (179ms)
      ✓ Item is accessable in itemRegistry & displayed in activeItems
      ✓ activeSerial and itemSerial increment (112ms)
      ✓ Listing returns item ID and emits "ItemListed()" (42ms)
    Item purchasing:
      ✓ Items with inifinite purchasability can be bought (101ms)
      ✓ Items with finite purchasability can be bought while in stock (42ms)
      ✓ Users cannot purchase items they cannot pay for
      ✓ Out-of-stock items cannot be purchased (115ms)
      ✓ Inactive items cannot be purchased (82ms)
      ✓ Users cannot purchase the same item twice (79ms)
      ✓ User balance decrements according to item cost (92ms)
      ✓ Purchasing emits "ItemPurchased" (49ms)
    Item delisting
      ✓ Items that are active can be delisted (96ms)
      ✓ Items that are inactive cannot be delisted (77ms)
      ✓ activeItems no longer includes the delisted item & activeSerial decrements (286ms)
      ✓ Delisting emits "ItemDelisted"
    Item profiles:
      ✓ Querying nonexistent serial throws
      ✓ Profile returns description, fungibility, quantity, cost, active
      ✓ Profile returns uuid of all purchasers (116ms)


  42 passing (16s)
